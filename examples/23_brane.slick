"detecting ill-formity" {
	error if error _.
}

"fundamental autonomy" {
	error (X said Y on behalf of Z) if
		and X says (Y says Z)
		and diff {X Y}.
}

"planner" {
	error (nah Sayer only planner may say X may work Y) if
		and Sayer says X may work Y
		and diff {Sayer planner}.
}

"driver" {
	error (only driver may say X R Y)
		if Sayer says (X R Y)
		and not diff {--input---> --output--> R}
		and diff {Sayer driver}.
}

"defining involvement" {
	error (nah Sayer only "defining involvement" may say X R Y)
		if Sayer says (X R Y)
		and not diff {--input---> --output--> R}
		and diff {Sayer driver}.

	error (Sayer cannot say X R Y) if
		and Sayer says (X R Y)
		and not diff {R (may involve) involves}
		and diff {Sayer "defining involvement" "data ownership"}.

	Thing involves Agent if
		and Thing may involve Agent
		and not opts out of involvement in Thing.

	Data may involve Agent if
		and Agent uploads Data.

	Task may involve Agent if
		and Data --input---> Task
		and Data involves Agent.

	Data may involve Agent if
		and Task --output--> Data
		and Task involves Agent.
}

"worker violation" {
	(violation (Agent "WRONGLY" works Task)) is sealed
		if violation (Agent "WRONGLY" works Task).

	violation (Agent "WRONGLY" works Task)
		if Agent works Task and not Agent may work Task.
}

"task predicates" {
	(task Task exists) is sealed if task Task exists.
	(Task is "UNDONE") is sealed if Task is "UNDONE".
	(Task is done)     is sealed if Task is done.

	(task Task exists) if ____ --input---> Task.
	(task Task exists) if Task --output--> ____.

	Task is done if
		and _ works Task.

	Task is "UNDONE" if
		and task Task exists
		and not Task is done.
}

"data ownership" {
	Agent evidently owns (Agent Suffix)
		if Agent uploads (Agent Suffix).
	
	error (Agent uploads but doesn't evidently own Data) if
		and Agent uploads Data
		and not Agent evidently owns Data.

	Data may involve Agent if
		and Agent evidently owns Data.
}

"checker enumeration" {
	(checker X) is sealed if checker X.
}


"authentication" {
	(violation (Agent did Task but Checker didn't authenticate)) is sealed
		if violation (Agent did Task but Checker didn't authenticate).

	violation (Agent did Task but Checker didn't authenticate) if
		and checker Checker
		and Task involves Checker
		and not Checker says Task is authenticated
		and Agent works Task
		and diff {Agent Checker}.
}

////////////// EXAMPLE /////////////

"checker enumeration" {
	checker bob.
	checker amy.
}

driver {
	(amy 2) --input---> task1.
	(bob 1) --input---> task1.
	task1 --output--> new.
}

planner {
	amy uploads (amy 2).
	bob may work task1. 
}

amy {
	task1 is authenticated.
}

"showmanship haha get it?" {
	show (X involves Y) if X involves Y.
	show (violation X) if violation X.
	show (error X) if error X.
	show (X authenticates Y) if (X authenticates Y).
	show (X uploads Y) if (X uploads Y).
	show (X works Y) if (X works Y).
	show (checker X) if (checker X).
}