"detecting ill-formity" {
	error if error _.
}

"defining sealing" {
	// only X may say (X lets _ say _)
	error if
		and Sayer says (X lets Y say _)
		and diff {Sayer X "defining sealing"}.

	// letting _ say is transitive.
	X lets Z say Fact if
		and X lets Y say Fact
		and Y lets Z say Fact.

	error Fact sealed by Sealer but said by Sayer if
		and Sealer seals Fact
		and Sayer says Fact
		and not Sealer lets Sayer say X.
}

"asserting agent autonomy" {
	// E.g. only X can say (X uploads _)
	uploads is binary self-annotating.
	works   is binary self-annotating.

	error (A says (B X C) but A isn't B) if
		and A says (B X C)
		and X is binary self-annotating
		and diff {A B}.

	// E.g. only X can say (X labels _ _)
	labels is ternary self-annotating.

	error (A says (B X C D) but A isn't B) if
		and A says (B X C D)
		and X is ternary self-annotating
		and diff {A B}.
}

planner {
	planner seals (X --input---> Y) if X --input---> Y.
	//planner seals (X --output--> Y) if X --output--> Y.
}

amy {
	a --input---> b.
}

/*

"defining controllers of predicates" {
	"defining controllers of predicates" controls binary controls.
	planner controls binary uploads.
	planner controls binary "planned to work".
	policy controls binary violates.

	error (Sayer says A X B but Sayer isn't controller Controller) if
		and Sayer says (A X B)
		and Controller controls binary X
		and diff {Sayer Controller}.
}



/*
policy {
	error (X says (Y violates Z)) if
		and X says (Y violates Z)
		and diff {X policy}.

	X violates planning if
		and X works Y
		and not X "planned to work" Y.
}

agreement {
	Agent "evidently-owns" Data if
		and Agent uploads Data
		and same{Data (Agent _)}.

	Data involves Agent
		if Agent uploads Data
		and not Agent "opts out of involvement in" Data.

	Task involves Agent
		if Data --input--> Task
		and Data involves Agent.

	Data involves Agent
		if Task --output--> Data
		and Task involves Agent
		and not Agent "opts out of involvement in" Data.
}

driver {
	(amy 2) --input--> t1.
    t1 --output--> (bob 1).
	(bob 1) --input--> t2.
}

planner {
	amy "planned to work" t1.
}

amy {
	amy uploads (amy 2).
	amy "opts out of involvement in" (amy 2).
}

bob {
	bob uploads (bob 1).
}
*/