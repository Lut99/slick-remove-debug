"detecting ill-formity" {
	error if error _.
}

"fundamental autonomy" {
	error (X said Y on behalf of Z) if
		and X says (Y says Z)
		and diff {X Y}.
}

"defining sealing" {
	// transitive closure of (_ says _ may say Fact), for each Fact.
	X says (Z may say Fact) if
		and X says (Y may say Fact)
		and Z says (Z may say Fact).

	// error if X seals, Y says, and X does not say Y may say.
	error Fact sealed by Sealer but said by Sayer if
		and Sealer says (Fact is sealed)
		and Sayer says Fact
		and not Sealer says (Sayer may say Fact)
		and diff {Sayer Sealer}.
}

"planner" {
	(X may work Y) is sealed if X may work Y.
}

"driver" {
	(X --input---> Y) is sealed if X --input---> Y.
	(X --output--> Y) is sealed if X --output--> Y.
}

"defining involvement" {
	(X involves Y) is sealed if (X involves Y).
	"data ownership" may say (X involves Y) if X involves Y.

	Task involves Agent if
		and Data --input---> Task
		and Data involves Agent
		and not Agent opts out of involvement in Task
		and not Agent opts out of involvement in Data.

	Data involves Agent if
		and Task --output--> Data
		and Task involves Agent
		and not Agent opts out of involvement in Task
		and not Agent opts out of involvement in Data.
}

"autonomy of work" {
	error if
		and Sayer says (Agent works Task)
		and diff {Sayer Agent}.
}

"worker violation" {
	(violation (Agent "WRONGLY" works Task)) is sealed
		if violation (Agent "WRONGLY" works Task).

	violation (Agent "WRONGLY" works Task)
		if Agent works Task and not Agent may work Task.
}

"task predicates" {
	(task Task exists) is sealed if task Task exists.
	(Task is "UNDONE")   is sealed if Task is "UNDONE".
	(Task is done)     is sealed if Task is done.

	(task Task exists) if ____ --input---> Task.
	(task Task exists) if Task --output--> ____.

	Task is done if
		and _ works Task.

	Task is "UNDONE" if
		and task Task exists
		and not Task is done.
}

"data ownership" {
	Agent evidently owns (Agent Suffix)
		if Agent uploads (Agent Suffix).
	
	error if
		and Agent uploads Data
		and not Agent evidently owns Data.

	Data involves Agent if
		and Agent evidently owns Data
		and not Agent opts out of involvement in Data.
}

"checker enumeration" {
	(checker X) is sealed if checker X.
}

"showmanship haha get it?" {
	show (X involves Y) if X involves Y.
	show (violation X) if violation X.
	show (error X) if error X.
}

////////////// EXAMPLE /////////////


"checker enumeration" {
	checker amy.
	checker bob.
}

driver {
	(amy 1) --input---> t1.
	t1 --output--> d1.
	d1 --input---> t2.
	t2 --output--> d2.
}

planner {
	amy may work t1. 
}

amy {
	amy works t1.
	amy uploads (amy 1).
	amy opts out of involvement in t1.
}

dan {
	dan works t2.
}
