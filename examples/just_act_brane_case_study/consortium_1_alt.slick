consortium 1 {
        // Statement (consortium 1) ...
    error if error Reason.

    error ? if (Fact within Msg1) within Msg2.
    error ? if diff { Sayer Actor } and ((Actor X) enacted) within (Sayer Y).
    
    Sayer says Fact if Fact within (Sayer M) and diff { (consortium 1) (Sayer M) }.
    error ? if diff { Sayer consortium } and Sayer says (Agent says Fact).

        // ... continuing statement (consortium 1) ...
    Sayer drives Task if Sayer says (Task ready).
    Sayer drives Task if Sayer says (Task has input  Variable).
    Sayer drives Task if Sayer says (Task has output Label).
    error ? if diff { Sayer consortium } and Sayer says (Agent drives Task).

    error ? if Agent drives (Driver Name) and diff { Agent Driver }.
    error ? if Task executed and not Task ready.


        // ... continuing statement (consortium 1) ...
    error ? if Task2 executed and Task2 has input (Task1 Label) and not Task1 executed.

        // ... continuing statement (consortium 1) ...
    Worker reads  Variable     for Task if Worker says (Task executed) and Task has input  Variable.
    Worker writes (Task Label) for Task if Worker says (Task executed) and Task has output Label.
    error ? if not diff { Accesses reads writes } and diff { Sayer consortium }
        and Sayer says (Worker Accesses Variable for Task).

        // ... completing statement (consortium 1).
    error ? if Worker reads Variable for Task and Task involves Agent
        and not Agent says (authorise Worker reading Variable for Task).

    Task  involves Agent if Agent controls  (Task  Label).
    Task2 involves Agent if Task2 has input (Task1 Label) and Task1 involves Agent.

 /*    error ? if authorise Task in Msg1 by Worker
         and (Task has input Variable) within Msg2 and diff { Msg1 Msg2 }. */


        // ... completing statement (consortium 1).
    effect (Worker Accesses Variable for Task) by enacting (Worker M) if
        and (Task executed) within (Worker M) and (Worker M) enacted
        and not diff { Accesses reads writes } and Worker Accesses Variable for Task.

}
